
Entregable3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  0000053c  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  008001c0  008001c0  00000690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d43  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d3  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f3  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002f4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_18>
  4c:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3c       	cpi	r26, 0xC0	; 192
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 ec       	ldi	r26, 0xC0	; 192
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  9e:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GSDFP_on>:
	TCCR1B = (1<<WGM12) | (1<<CS10); //CTC mode - No prescaling
	GSDFP_setFreq(100);
}

void GSDFP_on(){
	TCCR1A = (1<<COM1A0); // toggle OC1A on campare match
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  ac:	08 95       	ret

000000ae <GSDFP_off>:
}

void GSDFP_off(){
	TCCR1A = 0x00; // OC1A disconected
  ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  b2:	08 95       	ret

000000b4 <GSDFP_setFreq>:
}

void GSDFP_setFreq(uint16_t f) {
	OCR1A = (F_CPU/(2*f)) - 1;
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	9c 01       	movw	r18, r24
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	72 e1       	ldi	r23, 0x12	; 18
  c2:	8a e7       	ldi	r24, 0x7A	; 122
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__udivmodsi4>
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d6:	08 95       	ret

000000d8 <GSDFP_init>:

#include "gsdfp.h"
#include <avr/io.h>

void GSDFP_init(){
	DDRB |= (1<<PORTB1); // sets OC1A as output
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0x00; // OC1A disconected
  de:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS10); //CTC mode - No prescaling
  e2:	89 e0       	ldi	r24, 0x09	; 9
  e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	GSDFP_setFreq(100);
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <GSDFP_setFreq>
  f0:	08 95       	ret

000000f2 <main>:
#include "menu.h"

extern volatile uint8_t UART_flag;

int main(void) {
	UART_init();
  f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_init>
	GSDFP_init();
  f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GSDFP_init>
	sei();
  fa:	78 94       	sei
	MENU_welcome();
  fc:	0e 94 89 00 	call	0x112	; 0x112 <MENU_welcome>
	while (1) {
		if (UART_flag) {
 100:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <UART_flag>
 104:	88 23       	and	r24, r24
 106:	e1 f3       	breq	.-8      	; 0x100 <main+0xe>
			UART_flag = 0;
 108:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <UART_flag>
			MENU_update();
 10c:	0e 94 be 00 	call	0x17c	; 0x17c <MENU_update>
 110:	f7 cf       	rjmp	.-18     	; 0x100 <main+0xe>

00000112 <MENU_welcome>:

uint8_t isnum(uint8_t c);
uint16_t pow10(uint8_t a);

void MENU_welcome() {
	UART_sendString((uint8_t *) "Generador de señales digitales de frecuencia programable");
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
	UART_sendString((uint8_t *) "Ingrese una frecuencia entre 100 y 10000HZ");
 11a:	89 e3       	ldi	r24, 0x39	; 57
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
	UART_sendString((uint8_t *) "ON - Encender generador");
 122:	84 e6       	ldi	r24, 0x64	; 100
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
	UART_sendString((uint8_t *) "OFF - Apagar generador");
 12a:	8c e7       	ldi	r24, 0x7C	; 124
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
	UART_sendString((uint8_t *) "RST - Reiniciar");
 132:	83 e9       	ldi	r24, 0x93	; 147
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
 13a:	08 95       	ret

0000013c <isnum>:
		UART_sendString((uint8_t *) "Comando no válido");
	}
}

uint8_t isnum(uint8_t c) {
	if (c >= '0' && c <= '9') 
 13c:	80 53       	subi	r24, 0x30	; 48
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	10 f4       	brcc	.+4      	; 0x146 <isnum+0xa>
		return 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
	else
		return 0;
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	08 95       	ret

0000014a <pow10>:

uint16_t pow10(uint8_t a) {
 14a:	68 2f       	mov	r22, r24
	uint16_t res = 1;
	for (int i = 1; i < a; i++)
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
	else
		return 0;
}

uint16_t pow10(uint8_t a) {
	uint16_t res = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 1; i < a; i++)
 154:	0d c0       	rjmp	.+26     	; 0x170 <pow10+0x26>
		res *= 10;
 156:	ac 01       	movw	r20, r24
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	84 0f       	add	r24, r20
 16a:	95 1f       	adc	r25, r21
		return 0;
}

uint16_t pow10(uint8_t a) {
	uint16_t res = 1;
	for (int i = 1; i < a; i++)
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	46 2f       	mov	r20, r22
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	24 17       	cp	r18, r20
 176:	35 07       	cpc	r19, r21
 178:	74 f3       	brlt	.-36     	; 0x156 <pow10+0xc>
		res *= 10;
	return res;
 17a:	08 95       	ret

0000017c <MENU_update>:
	UART_sendString((uint8_t *) "ON - Encender generador");
	UART_sendString((uint8_t *) "OFF - Apagar generador");
	UART_sendString((uint8_t *) "RST - Reiniciar");
}

void MENU_update() {
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	uint8_t i = 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
	while (UART_getCharFromBuffer(&command[i++]) && command[i - 1] != '\0') {
 188:	08 c0       	rjmp	.+16     	; 0x19a <MENU_update+0x1e>
 18a:	8c 2f       	mov	r24, r28
		if (i == 6){
 18c:	c6 30       	cpi	r28, 0x06	; 6
 18e:	29 f4       	brne	.+10     	; 0x19a <MENU_update+0x1e>
			UART_sendString((uint8_t *) "Comando no válido");
 190:	83 ea       	ldi	r24, 0xA3	; 163
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
			return;
 198:	90 c0       	rjmp	.+288    	; 0x2ba <MENU_update+0x13e>
	UART_sendString((uint8_t *) "RST - Reiniciar");
}

void MENU_update() {
	uint8_t i = 0;
	while (UART_getCharFromBuffer(&command[i++]) && command[i - 1] != '\0') {
 19a:	c1 e0       	ldi	r28, 0x01	; 1
 19c:	c8 0f       	add	r28, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	86 53       	subi	r24, 0x36	; 54
 1a2:	9d 4f       	sbci	r25, 0xFD	; 253
 1a4:	0e 94 b0 01 	call	0x360	; 0x360 <UART_getCharFromBuffer>
 1a8:	88 23       	and	r24, r24
 1aa:	39 f0       	breq	.+14     	; 0x1ba <MENU_update+0x3e>
 1ac:	ec 2f       	mov	r30, r28
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e7 53       	subi	r30, 0x37	; 55
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 81       	ld	r24, Z
 1b6:	81 11       	cpse	r24, r1
 1b8:	e8 cf       	rjmp	.-48     	; 0x18a <MENU_update+0xe>
		if (i == 6){
			UART_sendString((uint8_t *) "Comando no válido");
			return;
		}
	}
	if (strcmp(command, "ON") == 0) {
 1ba:	65 eb       	ldi	r22, 0xB5	; 181
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	8a ec       	ldi	r24, 0xCA	; 202
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	0e 94 93 02 	call	0x526	; 0x526 <strcmp>
 1c6:	89 2b       	or	r24, r25
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <MENU_update+0x54>
		GSDFP_on();
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <GSDFP_on>
 1ce:	75 c0       	rjmp	.+234    	; 0x2ba <MENU_update+0x13e>
	} else if (strcmp(command, "OFF") == 0) {
 1d0:	68 eb       	ldi	r22, 0xB8	; 184
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	8a ec       	ldi	r24, 0xCA	; 202
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	0e 94 93 02 	call	0x526	; 0x526 <strcmp>
 1dc:	89 2b       	or	r24, r25
 1de:	19 f4       	brne	.+6      	; 0x1e6 <MENU_update+0x6a>
		GSDFP_off();
 1e0:	0e 94 57 00 	call	0xae	; 0xae <GSDFP_off>
 1e4:	6a c0       	rjmp	.+212    	; 0x2ba <MENU_update+0x13e>
	} else if (strcmp(command, "RST") == 0) {
 1e6:	6c eb       	ldi	r22, 0xBC	; 188
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	8a ec       	ldi	r24, 0xCA	; 202
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	0e 94 93 02 	call	0x526	; 0x526 <strcmp>
 1f2:	89 2b       	or	r24, r25
 1f4:	29 f4       	brne	.+10     	; 0x200 <MENU_update+0x84>
		GSDFP_init();
 1f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GSDFP_init>
		MENU_welcome();
 1fa:	0e 94 89 00 	call	0x112	; 0x112 <MENU_welcome>
 1fe:	5d c0       	rjmp	.+186    	; 0x2ba <MENU_update+0x13e>
	} else if (strlen(command) > 2) {
 200:	ea ec       	ldi	r30, 0xCA	; 202
 202:	f2 e0       	ldi	r31, 0x02	; 2
 204:	01 90       	ld	r0, Z+
 206:	00 20       	and	r0, r0
 208:	e9 f7       	brne	.-6      	; 0x204 <MENU_update+0x88>
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	ea 5c       	subi	r30, 0xCA	; 202
 20e:	f2 40       	sbci	r31, 0x02	; 2
 210:	33 97       	sbiw	r30, 0x03	; 3
 212:	50 f5       	brcc	.+84     	; 0x268 <MENU_update+0xec>
 214:	4e c0       	rjmp	.+156    	; 0x2b2 <MENU_update+0x136>
		for (i = 0; i<strlen(command); i++) {
			if (!isnum(command[i])){
 216:	ef 2d       	mov	r30, r15
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e6 53       	subi	r30, 0x36	; 54
 21c:	fd 4f       	sbci	r31, 0xFD	; 253
 21e:	c0 81       	ld	r28, Z
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 9e 00 	call	0x13c	; 0x13c <isnum>
 226:	81 11       	cpse	r24, r1
 228:	05 c0       	rjmp	.+10     	; 0x234 <MENU_update+0xb8>
				UART_sendString((uint8_t *) "Comando no válido");
 22a:	83 ea       	ldi	r24, 0xA3	; 163
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
				return;
 232:	43 c0       	rjmp	.+134    	; 0x2ba <MENU_update+0x13e>
			} else {
				freq += (command[i] - '0') * (pow10(strlen(command) - i));
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	e0 97       	sbiw	r28, 0x30	; 48
 238:	80 2f       	mov	r24, r16
 23a:	8f 19       	sub	r24, r15
 23c:	0e 94 a5 00 	call	0x14a	; 0x14a <pow10>
 240:	9c 01       	movw	r18, r24
 242:	c2 9f       	mul	r28, r18
 244:	c0 01       	movw	r24, r0
 246:	c3 9f       	mul	r28, r19
 248:	90 0d       	add	r25, r0
 24a:	d2 9f       	mul	r29, r18
 24c:	90 0d       	add	r25, r0
 24e:	11 24       	eor	r1, r1
 250:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__data_end>
 254:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <__data_end+0x1>
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__data_end+0x1>
 260:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
		GSDFP_off();
	} else if (strcmp(command, "RST") == 0) {
		GSDFP_init();
		MENU_welcome();
	} else if (strlen(command) > 2) {
		for (i = 0; i<strlen(command); i++) {
 264:	f3 94       	inc	r15
 266:	01 c0       	rjmp	.+2      	; 0x26a <MENU_update+0xee>
 268:	f1 2c       	mov	r15, r1
 26a:	8f 2d       	mov	r24, r15
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ea ec       	ldi	r30, 0xCA	; 202
 270:	f2 e0       	ldi	r31, 0x02	; 2
 272:	01 90       	ld	r0, Z+
 274:	00 20       	and	r0, r0
 276:	e9 f7       	brne	.-6      	; 0x272 <MENU_update+0xf6>
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	8f 01       	movw	r16, r30
 27c:	0a 5c       	subi	r16, 0xCA	; 202
 27e:	12 40       	sbci	r17, 0x02	; 2
 280:	80 17       	cp	r24, r16
 282:	91 07       	cpc	r25, r17
 284:	40 f2       	brcs	.-112    	; 0x216 <MENU_update+0x9a>
				return;
			} else {
				freq += (command[i] - '0') * (pow10(strlen(command) - i));
			}
		}
		if (freq <= 10000 && freq >= 100) {
 286:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
 28a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <__data_end+0x1>
 28e:	9c 01       	movw	r18, r24
 290:	24 56       	subi	r18, 0x64	; 100
 292:	31 09       	sbc	r19, r1
 294:	2d 3a       	cpi	r18, 0xAD	; 173
 296:	36 42       	sbci	r19, 0x26	; 38
 298:	18 f4       	brcc	.+6      	; 0x2a0 <MENU_update+0x124>
			GSDFP_setFreq(freq);
 29a:	0e 94 5a 00 	call	0xb4	; 0xb4 <GSDFP_setFreq>
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <MENU_update+0x12c>
		} else {
			 UART_sendString((uint8_t *) "Comando no válido");
 2a0:	83 ea       	ldi	r24, 0xA3	; 163
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
		}
		freq = 0;
 2a8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <__data_end+0x1>
 2ac:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <MENU_update+0x13e>
	} else {
		UART_sendString((uint8_t *) "Comando no válido");
 2b2:	83 ea       	ldi	r24, 0xA3	; 163
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_sendString>
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	08 95       	ret

000002c6 <UART_init>:
static uint8_t TX_Buffer[TX_BUFFER_LENGTH], RX_Buffer[RX_BUFFER_LENGTH];

volatile uint8_t UART_flag;

void UART_init() {
	UBRR0H = (uint8_t) (BR>>8);
 2c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t) BR;
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); // enable RX and TX USART modules and RX interrupt
 2d0:	88 e9       	ldi	r24, 0x98	; 152
 2d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit - 1 stop bit - no parity - asynchronous mode
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2dc:	08 95       	ret

000002de <UART_sendString>:
}

void UART_sendString(const uint8_t * st){
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
	uint8_t i = 0;
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
	while (st[i] != '\0') {
 2e6:	16 c0       	rjmp	.+44     	; 0x314 <UART_sendString+0x36>
		if ((TX_writeIndex + 1) % TX_BUFFER_LENGTH == TX_readIndex) {
 2e8:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <TX_writeIndex>
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	c9 01       	movw	r24, r18
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	6a ef       	ldi	r22, 0xFA	; 250
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 2fa:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <TX_readIndex>
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	84 17       	cp	r24, r20
 302:	95 07       	cpc	r25, r21
 304:	69 f0       	breq	.+26     	; 0x320 <UART_sendString+0x42>
			//Error_code= ERROR_UART_FULL_BUFF;
			break;
		} else {
			TX_Buffer[TX_writeIndex] = st[i++];
 306:	ff 5f       	subi	r31, 0xFF	; 255
 308:	d9 01       	movw	r26, r18
 30a:	a4 53       	subi	r26, 0x34	; 52
 30c:	be 4f       	sbci	r27, 0xFE	; 254
 30e:	ec 93       	st	X, r30
			TX_writeIndex = (TX_writeIndex + 1) % TX_BUFFER_LENGTH;
 310:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <TX_writeIndex>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit - 1 stop bit - no parity - asynchronous mode
}

void UART_sendString(const uint8_t * st){
	uint8_t i = 0;
	while (st[i] != '\0') {
 314:	de 01       	movw	r26, r28
 316:	af 0f       	add	r26, r31
 318:	b1 1d       	adc	r27, r1
 31a:	ec 91       	ld	r30, X
 31c:	e1 11       	cpse	r30, r1
 31e:	e4 cf       	rjmp	.-56     	; 0x2e8 <UART_sendString+0xa>
		} else {
			TX_Buffer[TX_writeIndex] = st[i++];
			TX_writeIndex = (TX_writeIndex + 1) % TX_BUFFER_LENGTH;
		}
	}
	if (st[i] == '\0') {
 320:	e1 11       	cpse	r30, r1
 322:	1b c0       	rjmp	.+54     	; 0x35a <UART_sendString+0x7c>
		if ((TX_writeIndex + 1) % TX_BUFFER_LENGTH == TX_readIndex) {
 324:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <TX_writeIndex>
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	c9 01       	movw	r24, r18
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	6a ef       	ldi	r22, 0xFA	; 250
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 336:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <TX_readIndex>
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	84 17       	cp	r24, r20
 33e:	95 07       	cpc	r25, r21
 340:	61 f0       	breq	.+24     	; 0x35a <UART_sendString+0x7c>
			//Error_code= ERROR_UART_FULL_BUFF;
		} else {
			TX_Buffer[TX_writeIndex] = '\r';
 342:	f9 01       	movw	r30, r18
 344:	e4 53       	subi	r30, 0x34	; 52
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	9d e0       	ldi	r25, 0x0D	; 13
 34a:	90 83       	st	Z, r25
			TX_writeIndex = (TX_writeIndex + 1) % TX_BUFFER_LENGTH;
 34c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <TX_writeIndex>
			UCSR0B |= (1<<UDRIE0); //enable TX interrupt
 350:	e1 ec       	ldi	r30, 0xC1	; 193
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 62       	ori	r24, 0x20	; 32
 358:	80 83       	st	Z, r24
		}
	}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <UART_getCharFromBuffer>:
uint8_t UART_getCharFromBuffer(uint8_t * ch) {
 360:	fc 01       	movw	r30, r24
	if (RX_readIndex != RX_writeIndex) {
 362:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <RX_readIndex>
 366:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <RX_writeIndex>
 36a:	29 17       	cp	r18, r25
 36c:	81 f0       	breq	.+32     	; 0x38e <UART_getCharFromBuffer+0x2e>
		*ch = RX_Buffer[RX_readIndex];
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	d9 01       	movw	r26, r18
 372:	ae 53       	subi	r26, 0x3E	; 62
 374:	be 4f       	sbci	r27, 0xFE	; 254
 376:	8c 91       	ld	r24, X
 378:	80 83       	st	Z, r24
		RX_readIndex = (RX_readIndex + 1) % RX_BUFFER_LENGTH;
 37a:	c9 01       	movw	r24, r18
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	6a e0       	ldi	r22, 0x0A	; 10
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 386:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <RX_readIndex>
		return 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret
	} else 
		return 0;
 38e:	80 e0       	ldi	r24, 0x00	; 0
}
 390:	08 95       	ret

00000392 <__vector_18>:

ISR(USART_RX_vect) {
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	if ((RX_writeIndex + 1) % RX_BUFFER_LENGTH == RX_readIndex) {
 3b4:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <RX_writeIndex>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	c9 01       	movw	r24, r18
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	6a e0       	ldi	r22, 0x0A	; 10
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 3c6:	40 91 c7 02 	lds	r20, 0x02C7	; 0x8002c7 <RX_readIndex>
 3ca:	64 2f       	mov	r22, r20
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	86 17       	cp	r24, r22
 3d0:	97 07       	cpc	r25, r23
 3d2:	29 f4       	brne	.+10     	; 0x3de <__vector_18+0x4c>
		//error buffer is full
		RX_writeIndex = RX_readIndex;
 3d4:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <RX_writeIndex>
		UART_flag;
 3d8:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <UART_flag>
 3dc:	11 c0       	rjmp	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
	} else {
		RX_Buffer[RX_writeIndex] = UDR0;
 3de:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3e2:	f9 01       	movw	r30, r18
 3e4:	ee 53       	subi	r30, 0x3E	; 62
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	40 83       	st	Z, r20
		if (RX_Buffer[RX_writeIndex] == '\r') {
 3ea:	4d 30       	cpi	r20, 0x0D	; 13
 3ec:	39 f4       	brne	.+14     	; 0x3fc <__vector_18+0x6a>
			RX_Buffer[RX_writeIndex] = '\0';
 3ee:	f9 01       	movw	r30, r18
 3f0:	ee 53       	subi	r30, 0x3E	; 62
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	10 82       	st	Z, r1
			UART_flag = 1;
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <UART_flag>
		}
		RX_writeIndex = (RX_writeIndex + 1) % RX_BUFFER_LENGTH;
 3fc:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <RX_writeIndex>
	}
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_19>:

ISR(USART_UDRE_vect) {
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
	if (TX_readIndex != TX_writeIndex) { //there is data in buffer
 43e:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <TX_readIndex>
 442:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <TX_writeIndex>
 446:	e8 17       	cp	r30, r24
 448:	89 f0       	breq	.+34     	; 0x46c <__vector_19+0x4a>
		UDR0 = TX_Buffer[TX_readIndex];
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	e4 53       	subi	r30, 0x34	; 52
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	80 81       	ld	r24, Z
 452:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		TX_readIndex = (TX_readIndex + 1) % TX_BUFFER_LENGTH;
 456:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <TX_readIndex>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	6a ef       	ldi	r22, 0xFA	; 250
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 466:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <TX_readIndex>
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__vector_19+0x54>
	} else {
		UCSR0B &= ~(1<<UDRIE0); //disable interrupt
 46c:	e1 ec       	ldi	r30, 0xC1	; 193
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	8f 7d       	andi	r24, 0xDF	; 223
 474:	80 83       	st	Z, r24
	}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__divmodhi4>:
 492:	97 fb       	bst	r25, 7
 494:	07 2e       	mov	r0, r23
 496:	16 f4       	brtc	.+4      	; 0x49c <__divmodhi4+0xa>
 498:	00 94       	com	r0
 49a:	07 d0       	rcall	.+14     	; 0x4aa <__divmodhi4_neg1>
 49c:	77 fd       	sbrc	r23, 7
 49e:	09 d0       	rcall	.+18     	; 0x4b2 <__divmodhi4_neg2>
 4a0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivmodhi4>
 4a4:	07 fc       	sbrc	r0, 7
 4a6:	05 d0       	rcall	.+10     	; 0x4b2 <__divmodhi4_neg2>
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__divmodhi4_exit>

000004aa <__divmodhi4_neg1>:
 4aa:	90 95       	com	r25
 4ac:	81 95       	neg	r24
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__divmodhi4_neg2>:
 4b2:	70 95       	com	r23
 4b4:	61 95       	neg	r22
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255

000004b8 <__divmodhi4_exit>:
 4b8:	08 95       	ret

000004ba <__udivmodsi4>:
 4ba:	a1 e2       	ldi	r26, 0x21	; 33
 4bc:	1a 2e       	mov	r1, r26
 4be:	aa 1b       	sub	r26, r26
 4c0:	bb 1b       	sub	r27, r27
 4c2:	fd 01       	movw	r30, r26
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <__udivmodsi4_ep>

000004c6 <__udivmodsi4_loop>:
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	ee 1f       	adc	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	a2 17       	cp	r26, r18
 4d0:	b3 07       	cpc	r27, r19
 4d2:	e4 07       	cpc	r30, r20
 4d4:	f5 07       	cpc	r31, r21
 4d6:	20 f0       	brcs	.+8      	; 0x4e0 <__udivmodsi4_ep>
 4d8:	a2 1b       	sub	r26, r18
 4da:	b3 0b       	sbc	r27, r19
 4dc:	e4 0b       	sbc	r30, r20
 4de:	f5 0b       	sbc	r31, r21

000004e0 <__udivmodsi4_ep>:
 4e0:	66 1f       	adc	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	1a 94       	dec	r1
 4ea:	69 f7       	brne	.-38     	; 0x4c6 <__udivmodsi4_loop>
 4ec:	60 95       	com	r22
 4ee:	70 95       	com	r23
 4f0:	80 95       	com	r24
 4f2:	90 95       	com	r25
 4f4:	9b 01       	movw	r18, r22
 4f6:	ac 01       	movw	r20, r24
 4f8:	bd 01       	movw	r22, r26
 4fa:	cf 01       	movw	r24, r30
 4fc:	08 95       	ret

000004fe <__udivmodhi4>:
 4fe:	aa 1b       	sub	r26, r26
 500:	bb 1b       	sub	r27, r27
 502:	51 e1       	ldi	r21, 0x11	; 17
 504:	07 c0       	rjmp	.+14     	; 0x514 <__udivmodhi4_ep>

00000506 <__udivmodhi4_loop>:
 506:	aa 1f       	adc	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	a6 17       	cp	r26, r22
 50c:	b7 07       	cpc	r27, r23
 50e:	10 f0       	brcs	.+4      	; 0x514 <__udivmodhi4_ep>
 510:	a6 1b       	sub	r26, r22
 512:	b7 0b       	sbc	r27, r23

00000514 <__udivmodhi4_ep>:
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	5a 95       	dec	r21
 51a:	a9 f7       	brne	.-22     	; 0x506 <__udivmodhi4_loop>
 51c:	80 95       	com	r24
 51e:	90 95       	com	r25
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	08 95       	ret

00000526 <strcmp>:
 526:	fb 01       	movw	r30, r22
 528:	dc 01       	movw	r26, r24
 52a:	8d 91       	ld	r24, X+
 52c:	01 90       	ld	r0, Z+
 52e:	80 19       	sub	r24, r0
 530:	01 10       	cpse	r0, r1
 532:	d9 f3       	breq	.-10     	; 0x52a <strcmp+0x4>
 534:	99 0b       	sbc	r25, r25
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
